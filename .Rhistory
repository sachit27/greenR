#' @export
add_green_layer <- function(
map,
data,
layer_id,
type = c("polygon", "point", "line"),
color_palette = "viridis",
fill_var = NULL,
fill_opacity = 0.7,
popup = NULL,
tooltip = NULL,
group = NULL,
add_legend = TRUE,
legend_title = NULL
) {
type <- match.arg(type)
# Default color fallback
default_color <- "#228B22"
# Palette only if fill_var is provided
if (!is.null(fill_var) && fill_var %in% colnames(data)) {
pal <- leaflet::colorNumeric(palette = color_palette, domain = data[[fill_var]])
get_color <- function() pal(data[[fill_var]])
} else {
get_color <- function() default_color
add_legend <- FALSE  # No legend if there's no variable
}
if (type == "polygon") {
map <- map %>%
leaflet::addPolygons(
data = data,
fillColor = get_color(),
fillOpacity = fill_opacity,
color = "black", weight = 0.5,
popup = if (!is.null(popup)) data[[popup]] else NULL,
label = if (!is.null(tooltip)) data[[tooltip]] else NULL,
group = group,
layerId = layer_id
)
} else if (type == "point") {
map <- map %>%
leaflet::addCircleMarkers(
data = data,
radius = 5,
fillColor = get_color(),
fillOpacity = fill_opacity,
stroke = FALSE,
popup = if (!is.null(popup)) data[[popup]] else NULL,
label = if (!is.null(tooltip)) data[[tooltip]] else NULL,
group = group,
layerId = layer_id
)
} else if (type == "line") {
map <- map %>%
leaflet::addPolylines(
data = data,
color = get_color(),
weight = 2,
opacity = fill_opacity,
popup = if (!is.null(popup)) data[[popup]] else NULL,
label = if (!is.null(tooltip)) data[[tooltip]] else NULL,
group = group,
layerId = layer_id
)
}
if (add_legend && !is.null(fill_var)) {
map <- map %>%
leaflet::addLegend(
pal = pal,
values = data[[fill_var]],
title = legend_title %||% fill_var,
group = group,
position = "bottomright"
)
}
return(map)
}
m <- leaflet() %>%
addTiles()
m <- add_green_layer(m, trees, "trees", type = "point", group = "Trees")
m <- add_green_layer(m, green, "parks", type = "polygon", group = "Green Areas")
m %>%
leaflet::addLayersControl(
overlayGroups = c("Trees", "Green Areas"),
options = leaflet::layersControlOptions(collapsed = FALSE)
)
stack_green_layers_mapbox(
layers = list(
list(data = green_sf, id = "parks", type = "fill", color = "#66c2a5"),
list(data = tree_points, id = "trees", type = "circle", color = "#1b7837"),
list(data = access_grid, id = "access", type = "fill-extrusion", height_var = "accessibility_score")
),
mapbox_token = "pk.eyJ1Ijoic2FjaGl0Mjc5MCIsImEiOiJjbTFoeGU4emQwajhiMm1zZWIyZ3gzNmtxIn0.plvzGYJQBMRGG59gZxFg5Q",
output_html = "stacked_map.html",
center = c(lon, lat),
zoom = 14
)
#' Create a Stacked Mapbox GL Layer Map
#'
#' Renders multiple sf layers using Mapbox GL with fine-grained styling and z-ordering.
#'
#' @param layers A named list where each entry is a list with elements:
#'        - `data`: sf object,
#'        - `type`: one of "fill", "circle", "line",
#'        - `paint`: named list of paint properties,
#'        - `id`: unique ID,
#'        - `popup_col`: optional column name for popups.
#' @param mapbox_token Your Mapbox access token.
#' @param output_file Path to output HTML.
#' @param center Coordinates (lon, lat) for centering map.
#' @param zoom Initial zoom level.
#'
#' @return Creates an interactive HTML map with stacked layers.
#' @export
stacked_mapbox_layers <- function(layers, mapbox_token, output_file = "stacked_map.html",
center = c(8.5417, 47.3769), zoom = 12) {
# Convert each sf layer to GeoJSON string
geojson_strings <- lapply(layers, function(layer) {
temp_geojson <- tempfile(fileext = ".geojson")
sf::st_write(layer$data, temp_geojson, driver = "GeoJSON", quiet = TRUE)
paste(readLines(temp_geojson, warn = FALSE), collapse = "\n")
})
# Generate JS source + layer definitions
js_layers <- mapply(function(layer, geojson, index) {
id <- layer$id
source <- sprintf("source_%s", id)
paint_json <- jsonlite::toJSON(layer$paint, auto_unbox = TRUE)
popup_code <- if (!is.null(layer$popup_col)) {
sprintf(
'map.on("click", "%s", (e) => {
new mapboxgl.Popup()
.setLngLat(e.lngLat)
.setHTML(`<strong>%s:</strong> ${e.features[0].properties.%s}`)
.addTo(map);
});',
id, layer$popup_col, layer$popup_col
)
} else ""
sprintf('
map.addSource("%s", {
type: "geojson",
data: %s
});
map.addLayer({
id: "%s",
type: "%s",
source: "%s",
paint: %s
});
%s
', source, geojson, id, layer$type, source, paint_json, popup_code)
}, layers, geojson_strings, seq_along(layers), SIMPLIFY = FALSE)
html <- sprintf('
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>Stacked Mapbox Layers</title>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link href="https://api.mapbox.com/mapbox-gl-js/v3.4.0/mapbox-gl.css" rel="stylesheet" />
<script src="https://api.mapbox.com/mapbox-gl-js/v3.4.0/mapbox-gl.js"></script>
<style>body, html { margin: 0; height: 100%%; } #map { width: 100%%; height: 100%%; }</style>
</head>
<body>
<div id="map"></div>
<script>
mapboxgl.accessToken = "%s";
const map = new mapboxgl.Map({
container: "map",
style: "mapbox://styles/mapbox/light-v11",
center: [%f, %f],
zoom: %f
});
map.on("load", () => {
%s
});
</script>
</body>
</html>
', mapbox_token, center[1], center[2], zoom, paste(js_layers, collapse = "\n"))
writeLines(html, output_file)
message("Map saved to: ", output_file)
if (interactive()) utils::browseURL(output_file)
}
my_osm <- get_osm_data("Basel, Switzerland")
stacked_mapbox_layers(
layers = list(
green = list(
data = my_osm$green_areas$osm_polygons,
id = "green_areas",
type = "fill",
paint = list("fill-color" = "green", "fill-opacity" = 0.4),
popup_col = "landuse"
),
trees = list(
data = my_osm$trees$osm_points,
id = "trees_layer",
type = "circle",
paint = list("circle-color" = "darkgreen", "circle-radius" = 3),
popup_col = "osm_id"
)
),
mapbox_token = "pk.eyJ1Ijoic2FjaGl0Mjc5MCIsImEiOiJjbTFoeGU4emQwajhiMm1zZWIyZ3gzNmtxIn0.plvzGYJQBMRGG59gZxFg5Q"
)
stacked_3d_mapbox <- function(layers, mapbox_token, output_file = "stacked_3d_map.html",
center = c(8.5417, 47.3769), zoom = 13, pitch = 45, bearing = -17.6) {
geojson_strings <- lapply(layers, function(layer) {
data <- layer$data
if (!inherits(data, "sf")) stop("Each layer must include an 'sf' object")
if (inherits(sf::st_geometry(data), "sfc_POINT")) {
# Buffer point data to polygon
data <- sf::st_buffer(data, dist = 10)
}
temp_geojson <- tempfile(fileext = ".geojson")
sf::st_write(data, temp_geojson, driver = "GeoJSON", quiet = TRUE)
paste(readLines(temp_geojson, warn = FALSE), collapse = "")
})
js_layers <- mapply(function(layer, geojson) {
id <- layer$id
height <- layer$height
color <- layer$color %||% "#74c476"
opacity <- layer$opacity %||% 0.7
sprintf('
map.addSource("%s", {
"type": "geojson",
"data": %s
});
map.addLayer({
"id": "%s",
"type": "fill-extrusion",
"source": "%s",
"paint": {
"fill-extrusion-color": "%s",
"fill-extrusion-height": %s,
"fill-extrusion-opacity": %s
}
});
', id, geojson, id, id, color, height, opacity)
}, layers, geojson_strings, SIMPLIFY = TRUE)
html <- sprintf('
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>Stacked 3D Green Map</title>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link href="https://api.mapbox.com/mapbox-gl-js/v3.4.0/mapbox-gl.css" rel="stylesheet" />
<script src="https://api.mapbox.com/mapbox-gl-js/v3.4.0/mapbox-gl.js"></script>
<style>body, html { margin: 0; height: 100%%; } #map { width: 100%%; height: 100%%; }</style>
</head>
<body>
<div id="map"></div>
<script>
mapboxgl.accessToken = "%s";
const map = new mapboxgl.Map({
container: "map",
style: "mapbox://styles/mapbox/light-v11",
center: [%f, %f],
zoom: %f,
pitch: %f,
bearing: %f,
antialias: true
});
map.on("load", () => {
%s
});
</script>
</body>
</html>', mapbox_token, center[1], center[2], zoom, pitch, bearing,
paste(js_layers, collapse = "\n"))
writeLines(html, output_file)
message("3D map saved to: ", output_file)
if (interactive()) utils::browseURL(output_file)
}
stacked_3d_mapbox(
layers = list(
green = list(
id = "green_area",
data = my_osm$green_areas$osm_polygons,
height = 10,
color = "#a1dab4"
),
trees = list(
id = "tree_layer",
data = sf::st_buffer(my_osm$trees$osm_points, dist = 5),
height = 20,
color = "#41b6c4"
)
),
mapbox_token = "pk.eyJ1Ijoic2FjaGl0Mjc5MCIsImEiOiJjbTFoeGU4emQwajhiMm1zZWIyZ3gzNmtxIn0.plvzGYJQBMRGG59gZxFg5Q"
)
#' Compute street-level visible greenery (Green-View Index, GVI) with DeepLab-v3
#'
#' Uses Mapillary images and a DeepLab-v3 segmentation model (via Python
#' torch-vision) to estimate the percentage of vegetated pixels visible from
#' sampled points along OSM street edges.  Aggregates the results per image and
#' per edge.
#'
#' @param location    Character string (e.g. "Zurich, Switzerland") **or**
#'                    numeric bbox c(left, bottom, right, top).
#' @param mapillary_token Mapillary API key (Graph API v4).
#' @param sample_distance Distance (m) between sample points along streets.
#'                        Default = 50.
#' @param crs_code    Target CRS for processing (default = 3857).
#' @param max_images_per_point  Max candidate images fetched per point (default = 1).
#' @param vegetation_ids Integer vector of COCO-Stuff class indices considered
#'                       vegetation (defaults included).
#' @param show_progress Logical.  Show a progress bar. Default = TRUE.
#' @param make_leaflet  Logical. Produce a leaflet preview map. Default = FALSE.
#'
#' @return A list with components
#'   \item{images_sf}{sf POINT layer with image id, GVI, URL.}
#'   \item{edges_sf}{sf LINESTRING layer with mean GVI per edge.}
#'   \item{leaflet_map}{Optional leaflet widget.}
#' @export
#'
#' @examples
#' \donttest{
#'   out <- compute_visibility_greenery(
#'            location        = "Zurich, Switzerland",
#'            mapillary_token = Sys.getenv("MAPILLARY_TOKEN"),
#'            sample_distance = 50,
#'            make_leaflet    = TRUE)
#'   print(out$edges_sf)
#'   if (!is.null(out$leaflet_map)) out$leaflet_map
#' }
compute_visibility_greenery <- function(
location,
mapillary_token,
sample_distance       = 50,
crs_code              = 3857,
max_images_per_point  = 1,
vegetation_ids        =
c(21, 124, 125, 126, 127, 129), # tree, grass, plant-other, bush, leaves …
show_progress         = TRUE,
make_leaflet          = FALSE
) {
# -------------------------- safety checks ------------------------------
if (missing(mapillary_token) || nchar(mapillary_token) == 0)
stop("A valid Mapillary API token is required.")
if (!requireNamespace("reticulate", quietly = TRUE))
stop("Package 'reticulate' is required. Install it first.")
python_ok <- tryCatch({
reticulate::py_run_string("import torch, torchvision, PIL, requests, io")
TRUE
}, error = function(e) FALSE)
if (!python_ok)
stop("Cannot import torch/torchvision in the active Python env used by reticulate.")
# --------------------------- helper funs -------------------------------
# deep-learning segmentation in python (runs once and stays in memory)
py <- reticulate::import_builtins()               # helpers
seg_code <- "
import torch, torchvision, PIL, io, requests
model = torchvision.models.segmentation.deeplabv3_resnet50(weights='DEFAULT',
weights_backbone='DEFAULT')
model.eval()
preprocess = torchvision.transforms.Compose([
torchvision.transforms.ToTensor(),
torchvision.transforms.Normalize(mean=[0.485,0.456,0.406],
std =[0.229,0.224,0.225])
])
def gvi_from_url(url, veg_ids):
try:
img_bytes = requests.get(url, timeout=10).content
img = PIL.Image.open(io.BytesIO(img_bytes)).convert('RGB')
inp = preprocess(img).unsqueeze(0)
with torch.no_grad():
out = model(inp)['out'][0].argmax(0).cpu()
mask = torch.zeros_like(out, dtype=torch.bool)
for vid in veg_ids:
mask |= (out == vid)
gvi = mask.sum().item() / mask.numel()
return gvi
except Exception as e:
return None
"
reticulate::py_run_string(seg_code)
gvi_from_thumbnail <- function(url) {
reticulate::py$gvi_from_url(url, vegetation_ids)
}
# get Mapillary image(s) near lon/lat via Graph API v4
get_nearest_mly <- function(lon, lat, limit = max_images_per_point) {
endpoint <- "https://graph.mapillary.com/images"
fields   <- "id,thumb_1024_url,computed_compass_angle"
resp <- httr::GET(
endpoint,
query = list(
access_token = mapillary_token,
fields       = fields,
limit        = limit,
closeto      = sprintf("%f,%f", lon, lat)  # → documented Graph API param
),
httr::timeout(10)
)
if (resp$status_code != 200) return(NULL)
imgs <- httr::content(resp, as = "parsed", simplifyVector = TRUE)$data
if (length(imgs) == 0) return(NULL)
tibble::as_tibble(imgs)
}
# ------------------- 1. get streets + sample points --------------------
osm <- get_osm_data(location)
edges <- sf::st_transform(osm$highways$osm_lines, crs_code)
pts   <- sf::st_line_sample(edges, density = 1 / sample_distance)
pts   <- sf::st_as_sf(sf::st_cast(pts, "POINT"))
pts$edge_id <- gl(nrow(edges), lengths(sf::st_geometry(edges)), n = nrow(pts))
if (show_progress)
pb <- progress::progress_bar$new(total = nrow(pts),
format = " Images [:bar] :current/:total (:percent) ")
# ------------------- 2. fetch images + run segmentation ---------------
res_list <- vector("list", nrow(pts))
for (i in seq_len(nrow(pts))) {
if (show_progress) pb$tick()
lonlat <- sf::st_coordinates(sf::st_transform(pts[i, ], 4326))
imeta  <- tryCatch(
get_nearest_mly(lonlat[1], lonlat[2]),
error = function(e) NULL
)
if (is.null(imeta) || nrow(imeta) == 0) next
gvi <- gvi_from_thumbnail(imeta$thumb_1024_url[1])
res_list[[i]] <- dplyr::tibble(
image_id = imeta$id[1],
thumb_url = imeta$thumb_1024_url[1],
gvi       = gvi,
lon       = lonlat[1],
lat       = lonlat[2],
edge_id   = pts$edge_id[i]
)
}
img_tbl <- dplyr::bind_rows(res_list)
if (nrow(img_tbl) == 0)
stop("No Mapillary imagery found in the area or segmentation failed.")
images_sf <- sf::st_as_sf(img_tbl,
coords = c("lon", "lat"),
crs = 4326) |>
sf::st_transform(crs_code)
# ------------------- 3. aggregate to edge level -----------------------
gvi_edge <- img_tbl |>
dplyr::group_by(edge_id) |>
dplyr::summarise(edge_gvi = mean(gvi, na.rm = TRUE),
n_imgs   = dplyr::n(), .groups = "drop")
edges$edge_id <- seq_len(nrow(edges))
edges_sf <- dplyr::left_join(edges, gvi_edge, by = "edge_id")
# ------------------- 4. optional leaflet ------------------------------
leaflet_map <- NULL
if (make_leaflet && requireNamespace("leaflet", quietly = TRUE)) {
pal <- leaflet::colorNumeric("Greens", domain = images_sf$gvi)
leaflet_map <- leaflet::leaflet() |>
leaflet::addProviderTiles(leaflet::providers$CartoDB.Positron) |>
leaflet::addCircles(data = images_sf,
color = ~pal(gvi), radius = 2,
popup = ~sprintf(
"<img src='%s' width='160'><br><b>GVI:</b> %.1f %%",
thumb_url, gvi * 100)) |>
leaflet::addLegend(pal = pal, values = images_sf$gvi,
title = "% green pixels")
}
# ------------------- 5. return ----------------------------------------
list(
images_sf   = images_sf,
edges_sf    = edges_sf,
leaflet_map = leaflet_map
)
}
devtools::document()
library(greenR)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
tools::showNonASCIIfile("R/chm_analysis.R")
tools::showNonASCIIfile("R/chm_analysis.R")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
grep("proj4::proj_init", "R/", recursive = TRUE, value = TRUE)
devtools::document()
devtools::check()
devtools::install(local = TRUE, reload = TRUE)
devtools::document()
devtools::check()
GDHVGJ8AVD5QRP6A
lintr::lint_package()
devtools::check_rhub()
library(rhub)
rhub::validate_email()
rhub::rhub_setup()
rhub::rhub_check()
devtools::install_github("sachit27/greenR", dependencies = TRUE)
library(greenR)
data <- get_osm_data("Basel, Switzerland")
green_areas_data <- data$green_areas
visualize_green_spaces(green_areas_data)
green_index <- calculate_green_index(data, 2056, 100)
map <- plot_green_index(green_index, interactive = TRUE, base_map = "CartoDB.DarkMatter")
print(map)
devtools::document()
devtools::check()
devtools::check()
setwd("/Users/smahajan/Downloads")
library(greenR)
res_loc <- chm_analysis(
location = "Medellin, Colombia",
max_tiles = 2, max_cells_mapview = 3e5
)
res_loc <- chm_analysis(
location = "Medellin, Colombia",
max_tiles = 2, max_cells_mapview = 2e5
)
devtools::document()
devtools::document()
devtools::check()
rhub::rhub_check(platforms = c("linux", "windows", "macos"))
